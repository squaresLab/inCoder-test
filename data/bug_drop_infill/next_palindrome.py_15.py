{"text": "def next_palindrome(digit_list):\n    high_mid = len(digit_list) // 2\n    low_mid = (len(digit_list) - 1) // 2\n    while high_mid < len(digit_list) and low_mid >= 0:\n        if digit_list[high_mid] == 9:\n            digit_list[high_mid] = 0\n            digit_list[low_mid] = 0\n            high_mid += 1\n            low_mid -= 1\n        else:\n            digit_list[high_mid] += 1\n            if low_mid != high_mid:\n                digit_list[low_mid] += 1\n            return digit_list\n    digit_list[high_mid] += 1\n    return digit_list\n\n\nif __name__ == \"__main__\":\n    digit_list = list(map(int, input().split()))\n    print(next_palindrome(digit_list))\n\n<|/ file source=github |>\n", "parts": ["def next_palindrome(digit_list):\n    high_mid = len(digit_list) // 2\n    low_mid = (len(digit_list) - 1) // 2\n    while high_mid < len(digit_list) and low_mid >= 0:\n        if digit_list[high_mid] == 9:\n            digit_list[high_mid] = 0\n            digit_list[low_mid] = 0\n            high_mid += 1\n            low_mid -= 1\n        else:\n            digit_list[high_mid] += 1\n            if low_mid != high_mid:\n                digit_list[low_mid] += 1\n            return digit_list\n    ", "\n"], "infills": ["digit_list[high_mid] += 1\n    return digit_list\n\n\nif __name__ == \"__main__\":\n    digit_list = list(map(int, input().split()))\n    print(next_palindrome(digit_list))\n\n<|/ file source=github |>"], "retries_attempted": 1}