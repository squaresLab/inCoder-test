{"text": "def mergesort(arr):\n    def merge(left, right):\n        result = []\n        i = 0\n        j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:] or right[j:])\n        return result\n\n    if len(arr) == 0:\n        return arr\n    \n    if len(arr) == 1:\n        return arr\n    \n    if len(arr) == 2:\n        return mergesort(arr[:1]) + arr[1:]\n    \n    if len(arr) == 3:\n        middle = len(arr) // 2\n        left = mergesort(arr[:middle])\n        right = mergesort(arr[middle:])\n        return merge(left, right)", "parts": ["def mergesort(arr):\n    def merge(left, right):\n        result = []\n        i = 0\n        j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:] or right[j:])\n        return result\n\n    if len(arr) == 0:\n        return arr\n    ", "\n        middle = len(arr) // 2\n        left = mergesort(arr[:middle])\n        right = mergesort(arr[middle:])\n        return merge(left, right)"], "infills": ["\n    if len(arr) == 1:\n        return arr\n    \n    if len(arr) == 2:\n        return mergesort(arr[:1]) + arr[1:]\n    \n    if len(arr) == 3:"], "retries_attempted": 1}