{"text": "def rpn_eval(tokens):\n    stack = []\n\n    for token in tokens:\n        if isinstance(token, float):\n            stack.append(token)\n        else:\n            stack.append(\n                rpn_eval(token)\n            )\n\n    return stack.pop()\n\n\ndef rpn_eval_with_symbols(tokens):\n    stack = []\n\n    for token in tokens:\n        if isinstance(token, float):\n            stack.append(token)\n        else:\n            stack.append(\n                rpn_eval_with_symbols(token)\n            )\n\n    return stack.pop()\n\n\ndef rpn_eval_with_symbols_symbol(tokens):\n    stack = []\n\n    for token in tokens:\n        if isinstance(token, float):\n            stack.append(token)\n        else:\n            stack.append(\n                rpn_eval_with_symbols_symbol(token)\n            )\n\n\n        return {\n            '+': lambda a, b: a + b,\n            '-': lambda a, b: a - b,\n            '*': lambda a, b: a * b,\n            '/': lambda a, b: a / b\n        }[symbol](a, b)\n\n    stack = []\n\n    for token in tokens:\n        if isinstance(token, float):\n            stack.append(token)\n        else:\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(\n                op(token, a, b)\n            )\n\n    return stack.pop()", "parts": ["def rpn_eval(tokens):\n    ", "\n        return {\n            '+': lambda a, b: a + b,\n            '-': lambda a, b: a - b,\n            '*': lambda a, b: a * b,\n            '/': lambda a, b: a / b\n        }[symbol](a, b)\n\n    stack = []\n\n    for token in tokens:\n        if isinstance(token, float):\n            stack.append(token)\n        else:\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(\n                op(token, a, b)\n            )\n\n    return stack.pop()"], "infills": ["stack = []\n\n    for token in tokens:\n        if isinstance(token, float):\n            stack.append(token)\n        else:\n            stack.append(\n                rpn_eval(token)\n            )\n\n    return stack.pop()\n\n\ndef rpn_eval_with_symbols(tokens):\n    stack = []\n\n    for token in tokens:\n        if isinstance(token, float):\n            stack.append(token)\n        else:\n            stack.append(\n                rpn_eval_with_symbols(token)\n            )\n\n    return stack.pop()\n\n\ndef rpn_eval_with_symbols_symbol(tokens):\n    stack = []\n\n    for token in tokens:\n        if isinstance(token, float):\n            stack.append(token)\n        else:\n            stack.append(\n                rpn_eval_with_symbols_symbol(token)\n            )\n\n"], "retries_attempted": 1}