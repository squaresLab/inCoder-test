{"text": "def minimum_spanning_tree(weight_by_edge):\n    group_by_node = {}\n    mst_edges = set()\n\n    for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):\n        u, v = edge\n        if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):\n            mst_edges.add(edge)\n            group_by_node[u].update(group_by_node[v])\n            for node in group_by_node[v]:\n                group_by_node[node].update(group_by_node[u])\n\n    tree = {}\n    for u, v in mst_edges:\n        tree[u] = v\n    return tree\n\n\ndef minimum_spanning_tree_for_graph(graph):\n    tree = minimum_spanning_tree(graph.edge_weights)\n    return tree\n\n\ndef minimum_spanning_tree_for_graph(graph, weight_by_edge):\n    tree = minimum_spanning_tree(weight_by_edge)\n    return tree\n\n\ndef minimum_spanning_tree_for_graph(graph, weight_by_edge, weight_by_node):\n    tree = minimum_spanning_tree(weight_by_edge)\n    return tree\n\n\ndef minimum_spanning_tree_for_graph(graph, weight_by_edge, weight_by_node, weight_by_edge):\n    tree = minimum_spanning_tree(weight_by_\n", "parts": ["def minimum_spanning_tree(weight_by_edge):\n    group_by_node = {}\n    mst_edges = set()\n\n    for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):\n        u, v = edge\n        if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):\n            mst_edges.add(edge)\n            group_by_node[u].update(group_by_node[v])\n            for node in group_by_node[v]:\n                group_by_node[node].update(group_by_node[u])\n\n    ", "\n"], "infills": ["tree = {}\n    for u, v in mst_edges:\n        tree[u] = v\n    return tree\n\n\ndef minimum_spanning_tree_for_graph(graph):\n    tree = minimum_spanning_tree(graph.edge_weights)\n    return tree\n\n\ndef minimum_spanning_tree_for_graph(graph, weight_by_edge):\n    tree = minimum_spanning_tree(weight_by_edge)\n    return tree\n\n\ndef minimum_spanning_tree_for_graph(graph, weight_by_edge, weight_by_node):\n    tree = minimum_spanning_tree(weight_by_edge)\n    return tree\n\n\ndef minimum_spanning_tree_for_graph(graph, weight_by_edge, weight_by_node, weight_by_edge):\n    tree = minimum_spanning_tree(weight_by_"], "retries_attempted": 1}